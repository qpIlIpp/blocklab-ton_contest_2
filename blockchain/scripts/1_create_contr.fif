#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

0 =: wc
"key" =: file-base
"../smartcont/self_regul_community.fif" include =: code
file-base +".pk" load-generate-keypair =: wallet_pk =: wallet_pb

code

$# 0>  { ."magic number was passed" } {  ."local magic number was used" "1" =: $1 } cond
$1 (number) drop =: ii // ii is init time parameter to create "beautiful" address

<b 0 32 u, wallet_pb B, <b b> ref, null dict, null dict, ii 32 u, b> // data

// ds~load_uint(32), ;; seqno
// ds~load_uint(256), ;; key
// ds~load_ref(), ;; users_top
// ds~load_dict(), ;; current_users
// ds~load_dict() ;; banned_users

null // no libraries
<b b{0011} s, 3 roll ref, rot ref, swap dict, b>  // create StateInit

=: state
state hashu wc swap 2dup 2constant wallet_addr
."new wallet address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr

<b 0 32 u, 0 32 u, b> =: msg

msg ."signing message: " <s csr. cr
msg hashu wallet_pk ed25519_sign_uint =: sign
<b b{1000100} s, wallet_addr addr, b{000010} s, state <s s, b{0} s, msg ref, sign B, b> 
// dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
"query.boc" tuck B>file
// ."(Saved wallet creating query to file " type .")" cr